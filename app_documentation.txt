# - The MongoDBAdapter does work, what it does is it stores the user info in the mongo db database. You can set options such as the name of the database or collection.

# - MongoDb data models - explains the next auth adapter data structure. i.e user, account session objects.
    https://authjs.dev/reference/adapters

# - These are the docs for interacting with a MongoDB database when using the node driver(what your currently using) -- this is much different
    from the official docs, which use other drivers/languages. You need to use these as a referance. The main docs explains this.
    https://www.mongodb.com/docs/drivers/node/current/

# - Connecting to the MongoDB database
    * Connecting to MongoDB with Next.js is slightly different then the example provided in the official docs(linked above).
    * Official docs: https://www.mongodb.com/docs/drivers/node/current/usage-examples/
      here it explains using ES Modules(import) vs CommonJS Module(require).
    * Here is another important link that explains how to connect MongoDB with Next.js
      https://www.mongodb.com/developer/languages/javascript/nextjs-with-mongodb/#getting-started-with-mongodb
      It also explains how to fetch data. This documentation is again, slightly different from the official docs.
      -------------------------------------------------------------------------------------
        import clientPromise from "../../lib/mongodb";

        export default async (req, res) => {
        try {
            const client = await clientPromise;
            const db = client.db("sample_mflix");
            ....
        VS.
        import { MongoClient } from "mongodb";

        const uri = "<connection string uri>";
        const client = new MongoClient(uri);

        async function run() {
        try {
            const database = client.db("sample_mflix");
            const movies = database.collection("movies");
            ...
      -------------------------------------------------------------------------------------
# - Extracting userId. If you attempt to extract user id from the session callback you will get a type error, the documentation isn't straight forward in it's explanation.
    If you dig deeper you will find this link https://next-auth.js.org/getting-started/typescript#module-augmentation which explains module augmentation. You have to go
    in and update the types. By default you can only access name, email, and image.

# - Apparently you cannot use Middleware with "database" strategy. This means you won't be able to protect routes unless you use
       JWT sessions.
       https://next-auth.js.org/configuration/options#session
        // Choose how you want to save the user session.
        // The default is `"jwt"`, an encrypted JWT (JWE) stored in the session cookie.
        // If you use an `adapter` however, we default it to `"database"` instead.
        // You can still force a JWT session by explicitly defining `"jwt"`.
        // When using `"database"`, the session cookie will only contain a `sessionToken` value,
        // which is used to look up the session in the database.

# - There is NO need to use Route Handlers inside of server components! (This is what you are doing now.) -- Fix.
    Route Handlers have specific use cases. Common use cases for Route Handlers are when you need to hide API keys,
    or secret URLS from the client. IF you are fetching/posting data in a server component they are already hidden from the client side.
    Furthermore, if you are fetching/posting data on the client side and their are no secrets/keys that need to be protected
    there is no point in using route handlers on the client side either. However, if you need to fetch/post data on the client side
    and there are secrets/keys that need to be hidden/protected this is when you would use a Route Handler. I.e a form (storing the
    data could require the use of sensitive info such as a userId, which is what you are doing.)

# - Another note on ROUTE HANDLERS, in the fetch request you can add query/searchParams and then access them in the route handler.
    The folder structure DOES NOT include the search params. It remains app/api/getData/route.ts
    example --- await fetch("/api/getData?name=Brian&lastName=Walters") ---> async Function GET(req) {
        const { searchParams } = new URL(request.url)
        const name = searchParams.get('name')
        const lastName = searchParams.get('lastName')
    }

# - Static vs Dynamic Rendering(App Router) - Principles are similar when using Pages Router but also different. Here's the rundown.
    * explained here https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic
    Static Routes are DEFAULT and rendered at build time. Notice DEFAULT. A route will remain STATIC unless you somehow opt out of
    data caching. This can be done in a variety of ways.
        https://nextjs.org/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating#opting-out-of-data-caching
        fetch requests are not cached if:
            The cache: 'no-store' is added to fetch requests.
            The revalidate: 0 option is added to individual fetch requests.
            The fetch request is inside a Router Handler that uses the POST method.
            The fetch request comes after the usage of headers or cookies.
            The const dynamic = 'force-dynamic' route segment option is used.
            The fetchCache route segment option is configured to skip cache by default.
            The fetch request uses Authorization or Cookie headers and there's an uncached request above it in the component tree.
        !*During rendering, if a dynamic function or uncached data request is discovered, Next.js will switch to dynamically rendering the whole route.

    For better performance for users it's best to use static rendering if possible. Static rendering allows data to be stored on CDNs and so the user does
    not have to access the origin server. Explained here
    *https://nextjs.org/learn/foundations/how-nextjs-works/cdns-and-edge

# - Client-Side Rendering vs. Pre-Rendering
    *https://nextjs.org/learn/foundations/how-nextjs-works/rendering
    Serverside Rendering(SSR) and Static Site Genaration(SSG) are both forms of pre rendering.

    Server-Side Rendering and Static Site Generation are also referred to as Pre-Rendering because the fetching of external data and transformation of
    React components into HTML happens before the result is sent to the client.

    In a standard React application, the browser receives an empty HTML shell from the server along with the JavaScript instructions to construct the
    UI. This is called client-side rendering because the initial rendering work happens on the user's device.

    In contrast, Next.js pre-renders every page by default. Pre-rendering means the HTML is generated in advance, on a server, instead of having it all
    done by JavaScript on the user's device.

# - Sequential Data Fetching vs Parallel Data Fetching
    *https://nextjs.org/docs/app/building-your-application/data-fetching/patterns
    Important data fetching principles to keep in mind to avoid BLOCKING. Blocking happens when data waterfalls are created. (where some data is dependening
    on other data, example data from one get request is required for another get request(sequential data fetching)). Sometimes this behavior is desired or even
    nessecary. Other times it delays load times and diminishes user experience. If possible you should fetch data in parallel, you can use streaming/suspense
    techniques to load components as the data becomes available, if a component is still loading you can display a loader of some kind to notify the user. examples
    of fetching data in Parallel are provided in the link above in the offical next.js docs.

# - So far you have two options(based on current level of knowledge so could be wrong), for revalidating data on server components.
    (in your case maybe its not so much revalidating as it is updating the UI to match current data. There are several other ways to
    "revalidate data", revalidating data is a term used when data is cached(i.e it's not dynamic, stays the same) your data isn't cached
    it's dynamic but the UI on server componets isn't updating automatically.) A: use router.refresh() in form handler.
    B: Use server action(experimental) and use revalidatePath("/user");

    The main difference is server actions allow access to FormData object, therefor you don't have to set up an event/event handler and
    prevent default behavior AND there isn't a need four a route handler as you can do everything in the server action.

    Both work in an almost identical way and NEITHER have an effect on client components(or maybe they do as long as the data is not
    cached on client fetch, THIS IS WHAT SWR IS DOING! it caches data and automatically revalidates on a reFocus event i.e window changes, TBD).
    Next step is to switch away from SWR and use a regular fetch call(for the purpose of your project it works fine anyway.) After which,
    determine if the UI updates automatically when the data changes. If it does not, will need a way to auto update UI to match current data.

    Also it's probably better to use server action option because then there isn't a need for route handlers. Either way, probably wouldn't
    make that big of difference.
