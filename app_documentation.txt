# - The MongoDBAdapter does work, what it does is it stores the user info in the mongo db database. You can set options such as the name of the database or collection.

# - MongoDb data models - explains the next auth adapter data structure. i.e user, account session objects.
    https://authjs.dev/reference/adapters

# - These are the docs for interacting with a MongoDB database when using the node driver(what your currently using) -- this is much different
    from the official docs, which use other drivers/languages. You need to use these as a referance. The main docs explains this.
    https://www.mongodb.com/docs/drivers/node/current/

# - Connecting to the MongoDB database
    * Connecting to MongoDB with Next.js is slightly different then the example provided in the official docs(linked above).
    * Official docs: https://www.mongodb.com/docs/drivers/node/current/usage-examples/
      here it explains using ES Modules(import) vs CommonJS Module(require).
    * Here is another important link that explains how to connect MongoDB with Next.js
      https://www.mongodb.com/developer/languages/javascript/nextjs-with-mongodb/#getting-started-with-mongodb
      It also explains how to fetch data. This documentation is again, slightly different from the official docs.
      -------------------------------------------------------------------------------------
        import clientPromise from "../../lib/mongodb";

        export default async (req, res) => {
        try {
            const client = await clientPromise;
            const db = client.db("sample_mflix");
            ....
        VS.
        import { MongoClient } from "mongodb";

        const uri = "<connection string uri>";
        const client = new MongoClient(uri);

        async function run() {
        try {
            const database = client.db("sample_mflix");
            const movies = database.collection("movies");
            ...
      -------------------------------------------------------------------------------------
# - Extracting userId. If you attempt to extract user id from the session callback you will get a type error, the documentation isn't straight forward in it's explanation.
    If you dig deeper you will find this link https://next-auth.js.org/getting-started/typescript#module-augmentation which explains module augmentation. You have to go
    in and update the types. By default you can only access name, email, and image.

# - Apparently you cannot use Middleware with "database" strategy. This means you won't be able to protect routes unless you use
       JWT sessions.
       https://next-auth.js.org/configuration/options#session
        // Choose how you want to save the user session.
        // The default is `"jwt"`, an encrypted JWT (JWE) stored in the session cookie.
        // If you use an `adapter` however, we default it to `"database"` instead.
        // You can still force a JWT session by explicitly defining `"jwt"`.
        // When using `"database"`, the session cookie will only contain a `sessionToken` value,
        // which is used to look up the session in the database.

# - There is NO need to use Route Handlers inside of server components! (This is what you are doing now.) -- Fix.
    Route Handlers have specific use cases. Common use cases for Route Handlers are when you need to hide API keys,
    or secret URLS from the client. IF you are fetching/posting data in a server component they are already hidden from the client side.
    Furthermore, if you are fetching/posting data on the client side and their are no secrets/keys that need to be protected
    there is no point in using route handlers on the client side either. However, if you need to fetch/post data on the client side
    and there are secrets/keys that need to be hidden/protected this is when you would use a Route Handler. I.e a form (storing the
    data could require the use of sensitive info such as a userId, which is what you are doing.)

# - Another note on ROUTE HANDLERS, in the fetch request you can add query/searchParams and then access them in the route handler.
    The folder structure DOES NOT include the search params. It remains app/api/getData/route.ts
    example --- await fetch("/api/getData?name=Brian&lastName=Walters") ---> async Function GET(req) {
        const { searchParams } = new URL(request.url)
        const name = searchParams.get('name')
        const lastName = searchParams.get('lastName')
    }

